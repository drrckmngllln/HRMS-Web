// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20240229120745_EmployeeCreation")]
    partial class EmployeeCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Core.Entities.Settings.AttendanceSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GracePeriod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeOut")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AttendanceSetups");
                });

            modelBuilder.Entity("Core.Entities.Settings.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("Core.Entities.Settings.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Core.Entities.Settings.LeaveSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LeaveSetups");
                });

            modelBuilder.Entity("Core.Entities.Settings.Positions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.CivilServiceEligibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateOfExamination")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateOfValidity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Eligibility")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaceOfExamination")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumberId");

                    b.ToTable("CivilServiceEligibilities");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.EducationalBackground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicHonors")
                        .HasColumnType("TEXT");

                    b.Property<string>("Course")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameOfSchool")
                        .HasColumnType("TEXT");

                    b.Property<string>("PeriodEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("PeriodStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitsEarned")
                        .HasColumnType("TEXT");

                    b.Property<string>("YearGraduated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumberId");

                    b.ToTable("EducationalBackgrounds");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.FamilyBackground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BusinessAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FatherFirstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("FatherMiddlename")
                        .HasColumnType("TEXT");

                    b.Property<string>("FatherSurname")
                        .HasColumnType("TEXT");

                    b.Property<string>("MotherFirstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("MotherMiddlename")
                        .HasColumnType("TEXT");

                    b.Property<string>("MotherSurnamne")
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpouseFirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpouseMiddlename")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpouseSurname")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumberId");

                    b.ToTable("FamilyBackgrounds");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.LearningAndDevelopment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Conducted")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleOfLearningAndDevelopment")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeOfLd")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumberId");

                    b.ToTable("LearningAndDevelopments");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.NameOfChildren", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FamilyBackgroundId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fullname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FamilyBackgroundId");

                    b.ToTable("NameOfChildrens");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.OtherInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeNumberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NonAcademicDestinction")
                        .HasColumnType("TEXT");

                    b.Property<string>("Organization")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialSkills")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumberId");

                    b.ToTable("OtherInformations");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.PersonalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgencyEmployeeNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("BloodType")
                        .HasColumnType("TEXT");

                    b.Property<int>("CivilStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("GsisIdNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Height")
                        .HasColumnType("TEXT");

                    b.Property<string>("Middlename")
                        .HasColumnType("TEXT");

                    b.Property<string>("PagibigIdNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhilhealthNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SssNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<string>("TinNo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumberId");

                    b.ToTable("PersonalInformations");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.VoluntaryWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeNumberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAndAddressOfOrganization")
                        .HasColumnType("TEXT");

                    b.Property<string>("NatureOfWork")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumberId");

                    b.ToTable("VoluntaryWorks");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GovernmentService")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MonthlySalary")
                        .HasColumnType("TEXT");

                    b.Property<string>("PayGrade")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusOfAppointment")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumberId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.CivilServiceEligibility", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.Employee", "EmployeeNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeNumber");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.EducationalBackground", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.Employee", "EmployeeNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeNumber");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.Employee", b =>
                {
                    b.HasOne("Core.Entities.Settings.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Settings.Positions", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.FamilyBackground", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.Employee", "EmployeeNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeNumber");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.LearningAndDevelopment", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.Employee", "EmployeeNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeNumber");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.NameOfChildren", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.FamilyBackground", null)
                        .WithMany("NameOfChildrens")
                        .HasForeignKey("FamilyBackgroundId");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.OtherInformation", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.Employee", "EmployeeNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeNumber");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.PersonalInformation", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.Employee", "EmployeeNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeNumber");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.VoluntaryWork", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.Employee", "EmployeeNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeNumber");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.WorkExperience", b =>
                {
                    b.HasOne("Core.Entities.Transactions.EmployeeEntity.Employee", "EmployeeNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeNumber");
                });

            modelBuilder.Entity("Core.Entities.Transactions.EmployeeEntity.FamilyBackground", b =>
                {
                    b.Navigation("NameOfChildrens");
                });
#pragma warning restore 612, 618
        }
    }
}
